# # 1. Напишите функцию, которая принимает список кортежей от пользователя, где каждый кортеж содержит информацию о
# # студенте (имя, возраст, средний балл). Программа должна вывести на экран имена студентов, чей средний балл выше
# # заданного значения. Используйте методы кортежей и циклы для обработки данных.Выведите итоговый список на экран с
# # помощью команды print.
# # Пример списка кортежей:
# # [("Alice", 20, 90), ("Bob", 19, 80), ("Charlie", 21, 95), ("David", 18, 85)]
# # Пример вывода:
# # Введите пороговое значение среднего балла: 90
# # Студенты с средним баллом выше 90 : ['Charlie']
# #
# def filter_students_by_grade(students, min_grade):
#     high_grade_students = []  # Список для хранения имен студентов с высоким средним баллом
#
#     for student in students:
#         name, age, average_grade = student  # Распаковываем кортеж
#         if average_grade > min_grade:  # Проверяем, превышает ли средний балл порог
#             high_grade_students.append(name)  # Добавляем имя студента в список
#
#     return high_grade_students  # Возвращаем список студентов с высоким средним баллом
#
# # Функция для ввода данных о студентах
# def input_students():
#     students = []
#     while True:
#         name = input("Введите имя студента (или 'stop' для завершения ввода): ")
#         if name.lower() == 'stop':
#             break
#         age = int(input("Введите возраст студента: "))
#         average_grade = float(input("Введите средний балл студента: "))
#         students.append((name, age, average_grade))  # Добавляем кортеж с данными студента в список
#     return students
#
# students_list = input_students()    # Запрашиваем данные о студентах
#
# min_average_grade = float(input("Введите пороговое значение среднего балла: ")) # Задаем минимальный средний балл
#
# result = filter_students_by_grade(students_list, min_average_grade) # Вызываем функцию и получаем результат
#
# print(f"Студенты с средним баллом выше {min_average_grade}: {result}")
# #
# # 2. Напишите программу, которая принимает строку от пользователя и разбивает ее на отдельные слова. Затем программа
# # должна создать новый кортеж, содержащий длину каждого слова в исходной строке. Используйте методы строк и кортежей
# # для обработки данных.
# # Пример вывода:
# # Введите предложение: Программирование это интересно и полезно
# # Длины слов в предложении: (15, 3, 8, 2, 6)
# #
# # def get_word_lengths(sentence):
# #     words = sentence.split()    # Разбиваем строку на слова
# #     word_lengths = tuple(len(word) for word in words)   # Создаем кортеж с длинами слов
# #     return word_lengths
# #
# # user_input = input("Введите предложение: ")     # Запрашиваем ввод от пользователя
# # lengths = get_word_lengths(user_input)  # Получаем длины слов в предложении
# # print(f"Длины слов в предложении: {lengths}")
# #
# #
# #
# #
# #
# #
# #
# #
