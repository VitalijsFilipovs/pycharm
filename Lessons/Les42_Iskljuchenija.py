
###### ИСКЛЮЧЕНИЯ ######
# Исключения в Python представляют собой события, которые возникают во время
# выполнения программы и приводят к изменению обычного хода выполнения
# программы. Они могут возникать из-за ошибок в коде, непредвиденных условий или
# других проблем.
# Использование исключений позволяет логически разделить обработку ошибок от
# основного кода программы и предоставить возможность обработки и возврата из
# исключительных ситуаций.
# В Python можно выбросить исключение вручную с помощью ключевого слова raise.
# Это позволяет программисту указать, что произошло что-то необычное или
# нежелательное в коде и требуется выполнить определенные действия для
# обработки исключительной ситуации.

# def divide(x, y):
# if y == 0:
# raise ValueError("Деление на ноль недопустимо")
# return x / y

######## ИЕРАРХИЯ ИСКЛЮЧЕНИЙ #######
# В Python исключения образуют иерархию классов, где каждый класс исключения
# является наследником базового класса BaseException. Это позволяет обрабатывать
# исключения различных типов и выполнять специфические действия в зависимости
# от типа исключения.
# Оператор try-except позволяет обрабатывать исключения в коде. Блок try содержит
# код, который может вызвать исключение, а блок except определяет, как
# обрабатывать это исключение. Если исключение возникает в блоке try, то
# выполнение кода в блоке try прекращается, и управление передается в
# соответствующий блок except.

# try:
# x = 10 / 0
# print(x)
# except ZeroDivisionError:
# print("Ошибка деления на ноль")

# В одной конструкции try-except можно обработать несколько различных
# исключений. Для этого можно указать несколько блоков except, каждый из которых
# будет обрабатывать определенный тип исключения.

# try:
# x = int("abc")
# except ValueError:
# print("Ошибка преобразования строки в число")
# except TypeError:
# Python
# print("Ошибка типа данных")

# try:
# x = int("abc")
# except ValueError:
# print("Ошибка преобразования строки в число")
# except TypeError:
# print("Ошибка типа данных")

###### ЗАДАНИЕ ДЛЯ ЗАКРЕПЛЕНИЯ ######
# Объясните, что происходит при выполнении этого фрагмента кода:

# try:
# number = int(input("Введите число: "))
# print("Введенное число:", number)
# except:
# print("Преобразование прошло неудачно")
# print("Завершение программы")

# Ключевое слово finally используется вместе с блоком try-except и позволяет
# определить код, который будет выполнен в любом случае, независимо от
# возникновения исключений. Блок finally выполняется всегда после выполнения
# блока try-except, даже если возникло исключение.

# file = open("data.txt", "w")
# try:
# file.write("Lorum Ipsum")
# except:
# print("Запись не удалась")
# finally:
# file.close()

##### ЗАДАНИЕ ДЛЯ ЗАКРЕПЛЕНИЯ #####
# Объясните, что происходит при выполнении этого фрагмента кода:

# try:
# number = int(input("Введите число: "))
# print("Введенное число:", number)
# except:
# print("Преобразование прошло неудачно")
# finally:
# print("Блок try завершил выполнение")
# print("Завершение программы")

# Ключевое слово else в блоке try-except используется для определения кода,
# который будет выполнен только в случае, если в блоке try не возникло исключений.

# try:
# x = 10 / 2
# except ZeroDivisionError:
# print("Ошибка деления на ноль")
# else:
# print("Результат:", x) # Выводит "Результат: 5.0"

######## ПРАКТИЧЕСКАЯ РАБОТА ######
# 1. Напишите программу, которая будет считывать данные из файла names.txt и
# будет формировать список кортежей из пяти полей: фамилия, имя, год
# рождения, курс и баллы.
# Обработайте следующие ошибки: файла не существует, нельзя считать из
# файла, возраст не является числом, возраст отсутствует, неверное
# количество данных и т.п.

# Пример входного файла:
# Ivanov Ivan 1980 2 80
# Smith Ann 2000 1 67
# Petrov Petro 1999 1 90 43
# Schmidt Marta 1976 3
# Johnson John 1965g 5 99
# Archer Lenard 1978 v5 51
#
# 2. Напишите программу, которая считывает два числа от пользователя и
# выполняет деление первого числа на второе. Обработайте исключение
# ZeroDivisionError, которое может возникнуть при попытке деления на ноль. В
# случае возникновения исключения, выведите сообщение об ошибке, в
# противном случае выведите результат деления.
# ПОЛЕЗНЫЕ МАТЕРИАЛЫ