# Параметры функции
# При передаче параметров в функцию в Python существует различие между изменяемыми
# и неизменяемыми типами данных.
# Неизменяемые типы данных, такие как числа, строки и кортежи, передаются в
# функцию по значению, то есть создается копия значения параметра.
# Изменяемые типы данных, такие как списки и словари, передаются по ссылке,
# и функция может изменить их содержимое.

# def newlist(numbers, num):
#     num += 1
#     numbers.append(num)
#     print(numbers, num)
#
# k = [1,2]
# b = 3
# newlist(k,b)
# print(k,b) #k становится [1,2,4], b осталось 3
#
# numbers = [1, 2]
# new_numbers = numbers
# new_numbers.append(3)
# print(numbers)
# print(new_numbers)

# В Python можно определить функцию, которая принимает произвольное число
# аргументов. Это делается с использованием звездочки (*) перед именем параметра
# функции. Этот параметр будет представлять собой кортеж всех переданных аргументов.

# def my_function(*args):
#     for arg in args:
#         print(arg)
# my_function(1, 2, 3) # Выводит 1, 2, 3

# Напишите функцию, которая принимает произвольное количество аргументов и находит
# минимальное число среди них.
# Пример ввода: 3 10 22 -3 0
# Пример вывода: -3

# def find_min(*numbers):
#     return min(numbers)
#
# print(find_min(3, 10, 22, -3, 0))

# Вложенные функции
# В Python можно определить функцию внутри другой функции.
# Вложенные функции могут использоваться для организации кода, скрытия реализации
# или создания замыканий.

# def outer_function():
#     def inner_function():
#         print("Inner function")
#     inner_function()
# outer_function() # Выводит "Inner function"

# Ключевое слово nonlocal используется во вложенных функциях для
# объявления переменной, которая является не локальной, но и не глобальной.
# Оно позволяет обращаться к переменной из внешней функции, которая находится на один
# уровень выше.

# def outer_function():
#     x = 1
#     def inner_function():
#         nonlocal x
#         x = 2
#     inner_function()
#     print(x) # Выводит 2
# outer_function()

# pravila kak rabotatj s oblastjami vidimosti
# Local
# Enclosed
# Global
# Build-in

# Задание для закрепления
# Какой будет результат выполнения программы?

# def внешняя_функция():
#     переменная = 10
#     def вложенная_функция():
#         nonlocal переменная
#         переменная = 20
#     вложенная_функция()
#     print("Переменная внешней функции:", переменная)
#
# def внешняя_функция():
#     переменная = 10 # Это переменная внутри внешней функции
#     def вложенная_функция():
#         nonlocal переменная # С помощью "nonlocal" мы указываем, что хотим работать с переменной из внешней функции
#         переменная = 20
#     вложенная_функция()
#     print("Переменная внешней функции:", переменная)
# внешняя_функция() # 20

# Лямбда-функции
# Лямбда-функции (анонимные функции) - это компактный способ определения
# функции в одной строке.
# Они могут быть использованы там, где требуется передать функцию в качестве аргумента
# или создать простую функцию без необходимости определения отдельной функции.

# add = lambda x, y: x + y
# result = add(2, 3)
# print(result) # Выводит 5

# Лямбда-функции могут использоваться в сортировке для определения порядка
# сортировки элементов.
# Например, при сортировке списка кортежей по определенному индексу.

# my_list = [(5, 'b'), (1, 'a'), (3, 'c')]
# my_list.sort(key=lambda x: x[1])
# print(my_list) # Выводит [(1, 'a'), (5, 'b'), (3, 'c')]

# В Python существуют встроенные функции sorted и reversed, которые могут быть
# использованы для сортировки и обращения последовательностей соответственно.
# Они возвращают новые отсортированные или обращенные последовательности, не
# изменяя исходную последовательность.

# my_list = [3, 1, 2]
# sorted_list = sorted(my_list)
# reversed_list = list(reversed(my_list))
# print(sorted_list) # Выводит [1, 2, 3]
# print(reversed_list) # Выводит [2, 1, 3]

# Функции могут быть использованы в списковых включениях для применения операций к
# каждому элементу списка и создания нового списка.
# Например, применение функции abs к каждому элементу списка

# my_list = [-1, 2, -3]
# new_list = [abs(x) for x in my_list]
# print(new_list) # Выводит [1, 2, 3]


