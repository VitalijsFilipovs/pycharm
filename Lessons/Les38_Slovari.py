# frozenset - это класс, который преобразует строку или последовательность в
# неизменяемое множество.
# my_set = {1, 2, 3}
# my_frozen_set = frozenset({4, 5, 6})
# my_set.add(4) # Добавление элемента в изменяемое множество
# my_frozen_set.add(7) # Ошибка, нельзя добавить элемент в неизменяемое множество
# my_set = {x for x in range(5)}
# print(my_set) # Выводит {0, 1, 2, 3, 4}

# СТРУКТУРА ДАННЫХ СЛОВАРИ
# Словари - это неупорядоченные коллекции произвольных объектов с
# доступом по ключу. Являются изменяемыми структурами данных - их элементы
# могут быть изменены после создания.
# Каждый элемент словаря состоит из пары "ключ: значение". Ключи в словаре
# должны быть уникальными, а значения могут быть любого типа данных.
# my_dict = {"name": "John", "age": 25, "city": "New York"}


# РАБОТА СО СЛОВАРЯМИ
# Словари в Python можно создавать с помощью фигурных скобок и перечисления пар
# "ключ: значение", либо с использованием функции dict(), принимающей итерируемый
# объект, содержащий пары "ключ: значение".
# my_dict = {"name": "John", "age": 25}
# another_dict = dict([("name", "Jane"), ("age", 30)])
#
# # in - это оператор, который используется для проверки принадлежности ключа
# # словарю. Этот оператор проверяет наличие ключа в словаре.
# # Множества в Python поддерживают операции из теории множеств, такие как
# # пересечение (intersection), объединение (union), разность (difference),
# # симметрическая разность (symmetric_difference) и проверку на подмножество
# # (issubset) и надмножество (issuperset).
# my_dict = {"name": "John", "age": 25}
# print("name" in my_dict) # Выводит True
# print("city" in my_dict) # Выводит False
#
# # Для добавления элемента в словарь можно использовать оператор присваивания,
# # указав ключ и значение. Для удаления элемента из словаря можно использовать
# # оператор del или метод pop().
# Python
# Python
# Python
# my_dict = {"name": "John", "age": 25}
# my_dict["city"] = "New York" # Добавление элемента
# del my_dict["age"] # Удаление элемента по ключу
# my_dict.pop("city") # Удаление элемента с возвратом значения
#
# # Для итерирования по словарю можно использовать методы items(), keys() и values().
# # Метод items() возвращает пары "ключ: значение", keys() возвращает все ключи, а
# # values() - все значения словаря.
# my_dict = {"name": "John", "age": 25}
# for key, value in my_dict.items():
# print(key, value) # Выводит ключи и значения
#
# # Аргумент **kwargs позволяет передавать произвольное количество именованных
# # аргументов в функцию в виде словаря. Этот словарь будет содержать пары "ключ:
# # значение", где ключами являются имена аргументов, а значениями - переданные
# # значения.
# def my_function(**kwargs):
# for key, value in kwargs.items():
# print(key, value) # Выводит имена аргументов и их значения
# my_function(name="John", age=25)