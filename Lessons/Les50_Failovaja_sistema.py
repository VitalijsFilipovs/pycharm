# АРГУМЕНТЫ КОМАНДНОЙ СТРОКИ И
# ПЕРЕМЕННЫЕ ОКРУЖЕНИЯ
# Аргументы командной строки - это строки, разделенные пробелами, и могут
# быть доступны программе через специальный объект sys.argv из модуля sys.
# При запуске .py-файла можно передать аргументы командной строки, которые могут
# быть использованы программой для выполнения определенных действий или
# настроек.
# Кроме того, во время выполнения программы можно получить доступ к переменным
# окружения, которые предоставляют информацию о системе или пользователе.

# МОДУЛЬ SYS
# Модуль sys предоставляет доступ к некоторым переменным и функциям, связанным
# с интерпретатором Python и работой программы. Одним из наиболее полезных
# атрибутов модуля является sys.argv, который представляет список аргументов
# командной строки, переданных программе при запуске. С помощью sys.argv можно
# обработать аргументы командной строки и использовать их в программе.

# import sys
#
# args = sys.argv
# print(args)

# ЗАДАНИЕ ДЛЯ ЗАКРЕПЛЕНИЯ
# Создадайте файл test.py со следующим содержимым:
# import sys
# print('Список параметров, переданных скрипту')
# print(sys.argv)
# print([arg for arg in sys.argv if arg[0]!='-'])
# Запустите файл test.py следующим образом:
# $ python3 C:\Users\elekt\PycharmProjects\Project1\Lessons\test.py -file test.txt -pi 3.14

# МОДУЛЬ ARGPARSE
# Модуль argparse предоставляет более удобный и гибкий способ работы с
# аргументами командной строки. Он позволяет определить ожидаемые аргументы и
# их типы, задать справку и подсказки для пользователей, а также обрабатывать
# аргументы с использованием более сложной логики. argparse упрощает разработку
# интерфейса командной строки и повышает читаемость кода.

# import argparse
#
# parser = argparse.ArgumentParser()
# parser.add_argument('--input', help='Path to input file')
# parser.add_argument('--output', help='Path to output file')
# args = parser.parse_args()
# print(args.input)
# print(args.output)

# ФАЙЛОВАЯ СИСТЕМА КОМПЬЮТЕРА
# Файловая система компьютера представляет собой организацию и
# структурирование файлов и папок на диске.
# В операционных системах существует иерархическая структура каталогов, начиная
# от корневого каталога, который содержит все остальные каталоги и файлы. Работа с
# файловой системой позволяет программам выполнять операции чтения, записи,
# создания, перемещения и удаления файлов и папок

# МОДУЛЬ OS И OS.PATH
# Модуль os предоставляет функции для работы с операционной системой, включая
# файловую систему.
# Некоторые полезные функции включают os.chdir(), который позволяет изменить
# текущий рабочий каталог, os.getcwd(), который возвращает текущий рабочий
# каталог, os.listdir(), который возвращает список файлов и папок в указанном
# каталоге, os.mkdir(), который создает новый каталог, os.makedirs(), который создает
# новый каталог вместе со всеми промежуточными каталогами, и os.walk(), который
# рекурсивно перебирает все файлы и папки в указанном каталоге

# import os
#
# # Получаем текущую директорию
# current_dir = os.getcwd()
# print("Текущая директория:", current_dir)
#
# # Путь к директории Lessons
# lessons_dir = os.path.join(current_dir, "Lessons")
#
# # Проверяем, существует ли директория Lessons
# if os.path.exists(lessons_dir):
#     print("Директория 'Lessons' найдена.")
#
#     # Путь к новой папке TESTIROVKA
#     testirovka_dir = os.path.join(lessons_dir, "TESTIROVKA")
#
#     # Проверяем, существует ли папка TESTIROVKA перед созданием
#     if not os.path.exists(testirovka_dir):
#         try:
#             os.mkdir(testirovka_dir)  # Создаем папку TESTIROVKA
#             print("Папка 'TESTIROVKA' успешно создана в директории 'Lessons'.")
#         except Exception as e:
#             print("Ошибка при создании папки:", e)
#     else:
#         print("Папка 'TESTIROVKA' уже существует.")
# else:
#     print("Директория 'Lessons' не найдена.")






